{
  "kind": "ReplicaSet",
  "apiVersion": "apps/v1",
  "metadata": {
    "name": "coredns-656c964bff",
    "namespace": "kube-system",
    "uid": "ca615162-36c6-4592-ba35-07f69bfea12e",
    "resourceVersion": "2237",
    "generation": 2,
    "creationTimestamp": "2024-07-29T05:19:41Z",
    "labels": {
      "eks.amazonaws.com/component": "coredns",
      "k8s-app": "kube-dns",
      "pod-template-hash": "656c964bff"
    },
    "annotations": {
      "deployment.kubernetes.io/desired-replicas": "2",
      "deployment.kubernetes.io/max-replicas": "3",
      "deployment.kubernetes.io/revision": "2"
    },
    "ownerReferences": [
      {
        "apiVersion": "apps/v1",
        "kind": "Deployment",
        "name": "coredns",
        "uid": "46ebbafb-b553-4bfc-a8a1-53721e10e8fc",
        "controller": true,
        "blockOwnerDeletion": true
      }
    ]
  },
  "spec": {
    "replicas": 2,
    "selector": {
      "matchLabels": {
        "eks.amazonaws.com/component": "coredns",
        "k8s-app": "kube-dns",
        "pod-template-hash": "656c964bff"
      }
    },
    "template": {
      "metadata": {
        "creationTimestamp": null,
        "labels": {
          "eks.amazonaws.com/component": "coredns",
          "k8s-app": "kube-dns",
          "pod-template-hash": "656c964bff"
        },
        "annotations": {
          "eks.amazonaws.com/compute-type": "fargate"
        }
      },
      "spec": {
        "volumes": [
          {
            "name": "config-volume",
            "configMap": {
              "name": "coredns",
              "items": [
                {
                  "key": "Corefile",
                  "path": "Corefile"
                }
              ],
              "defaultMode": 420
            }
          }
        ],
        "containers": [
          {
            "name": "coredns",
            "image": "602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/coredns:v1.11.1-eksbuild.8",
            "args": [
              "-conf",
              "/etc/coredns/Corefile"
            ],
            "ports": [
              {
                "name": "dns",
                "containerPort": 53,
                "protocol": "UDP"
              },
              {
                "name": "dns-tcp",
                "containerPort": 53,
                "protocol": "TCP"
              },
              {
                "name": "metrics",
                "containerPort": 9153,
                "protocol": "TCP"
              }
            ],
            "resources": {
              "limits": {
                "memory": "170Mi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "70Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "config-volume",
                "readOnly": true,
                "mountPath": "/etc/coredns"
              }
            ],
            "livenessProbe": {
              "httpGet": {
                "path": "/health",
                "port": 8080,
                "scheme": "HTTP"
              },
              "initialDelaySeconds": 60,
              "timeoutSeconds": 5,
              "periodSeconds": 10,
              "successThreshold": 1,
              "failureThreshold": 5
            },
            "readinessProbe": {
              "httpGet": {
                "path": "/ready",
                "port": 8181,
                "scheme": "HTTP"
              },
              "timeoutSeconds": 1,
              "periodSeconds": 10,
              "successThreshold": 1,
              "failureThreshold": 3
            },
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "capabilities": {
                "add": [
                  "NET_BIND_SERVICE"
                ],
                "drop": [
                  "ALL"
                ]
              },
              "readOnlyRootFilesystem": true,
              "allowPrivilegeEscalation": false
            }
          }
        ],
        "restartPolicy": "Always",
        "terminationGracePeriodSeconds": 30,
        "dnsPolicy": "Default",
        "serviceAccountName": "coredns",
        "serviceAccount": "coredns",
        "securityContext": {},
        "affinity": {
          "nodeAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "nodeSelectorTerms": [
                {
                  "matchExpressions": [
                    {
                      "key": "kubernetes.io/os",
                      "operator": "In",
                      "values": [
                        "linux"
                      ]
                    },
                    {
                      "key": "kubernetes.io/arch",
                      "operator": "In",
                      "values": [
                        "amd64",
                        "arm64"
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "podAntiAffinity": {
            "preferredDuringSchedulingIgnoredDuringExecution": [
              {
                "weight": 100,
                "podAffinityTerm": {
                  "labelSelector": {
                    "matchExpressions": [
                      {
                        "key": "k8s-app",
                        "operator": "In",
                        "values": [
                          "kube-dns"
                        ]
                      }
                    ]
                  },
                  "topologyKey": "kubernetes.io/hostname"
                }
              }
            ]
          }
        },
        "schedulerName": "default-scheduler",
        "tolerations": [
          {
            "key": "node-role.kubernetes.io/control-plane",
            "effect": "NoSchedule"
          },
          {
            "key": "CriticalAddonsOnly",
            "operator": "Exists"
          }
        ],
        "priorityClassName": "system-cluster-critical",
        "topologySpreadConstraints": [
          {
            "maxSkew": 1,
            "topologyKey": "topology.kubernetes.io/zone",
            "whenUnsatisfiable": "ScheduleAnyway",
            "labelSelector": {
              "matchLabels": {
                "k8s-app": "kube-dns"
              }
            }
          }
        ]
      }
    }
  },
  "status": {
    "replicas": 2,
    "fullyLabeledReplicas": 2,
    "readyReplicas": 2,
    "availableReplicas": 2,
    "observedGeneration": 2
  }
}